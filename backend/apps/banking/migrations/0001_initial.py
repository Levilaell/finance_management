# Generated by Django 4.2.16 on 2025-05-29 18:21

from decimal import Decimal
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('companies', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='BankAccount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('account_type', models.CharField(choices=[('checking', 'Conta Corrente'), ('savings', 'Conta Poupan√ßa'), ('business', 'Conta Empresarial'), ('digital', 'Conta Digital')], max_length=20, verbose_name='account type')),
                ('agency', models.CharField(max_length=10, verbose_name='agency')),
                ('account_number', models.CharField(max_length=20, verbose_name='account number')),
                ('account_digit', models.CharField(blank=True, max_length=2, verbose_name='account digit')),
                ('external_account_id', models.CharField(blank=True, max_length=100, verbose_name='external account ID')),
                ('access_token', models.TextField(blank=True, verbose_name='access token')),
                ('refresh_token', models.TextField(blank=True, verbose_name='refresh token')),
                ('token_expires_at', models.DateTimeField(blank=True, null=True, verbose_name='token expires at')),
                ('status', models.CharField(choices=[('active', 'Ativa'), ('inactive', 'Inativa'), ('pending', 'Pendente'), ('error', 'Erro de Conex√£o'), ('expired', 'Token Expirado')], default='pending', max_length=20, verbose_name='status')),
                ('current_balance', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, verbose_name='current balance')),
                ('available_balance', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, verbose_name='available balance')),
                ('last_sync_at', models.DateTimeField(blank=True, null=True, verbose_name='last sync at')),
                ('sync_frequency', models.IntegerField(default=4, verbose_name='sync frequency (hours)')),
                ('nickname', models.CharField(blank=True, max_length=100, verbose_name='nickname')),
                ('is_primary', models.BooleanField(default=False, verbose_name='is primary account')),
                ('is_active', models.BooleanField(default=True, verbose_name='is active')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
            ],
            options={
                'verbose_name': 'Bank Account',
                'verbose_name_plural': 'Bank Accounts',
                'db_table': 'bank_accounts',
            },
        ),
        migrations.CreateModel(
            name='BankProvider',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='bank name')),
                ('code', models.CharField(max_length=10, unique=True, verbose_name='bank code')),
                ('logo', models.ImageField(blank=True, null=True, upload_to='bank_logos/', verbose_name='logo')),
                ('color', models.CharField(default='#000000', max_length=7, verbose_name='brand color')),
                ('is_open_banking', models.BooleanField(default=True, verbose_name='supports Open Banking')),
                ('api_endpoint', models.URLField(blank=True, verbose_name='API endpoint')),
                ('is_active', models.BooleanField(default=True, verbose_name='is active')),
                ('requires_agency', models.BooleanField(default=True, verbose_name='requires agency')),
                ('requires_account', models.BooleanField(default=True, verbose_name='requires account')),
                ('supports_pix', models.BooleanField(default=True, verbose_name='supports PIX')),
                ('supports_ted', models.BooleanField(default=True, verbose_name='supports TED')),
                ('supports_doc', models.BooleanField(default=True, verbose_name='supports DOC')),
            ],
            options={
                'verbose_name': 'Bank Provider',
                'verbose_name_plural': 'Bank Providers',
                'db_table': 'bank_providers',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='TransactionCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='category name')),
                ('slug', models.SlugField(unique=True, verbose_name='slug')),
                ('category_type', models.CharField(choices=[('income', 'Receita'), ('expense', 'Despesa'), ('transfer', 'Transfer√™ncia')], max_length=20, verbose_name='category type')),
                ('icon', models.CharField(default='üí∞', max_length=50, verbose_name='icon')),
                ('color', models.CharField(default='#3B82F6', max_length=7, verbose_name='color')),
                ('keywords', models.JSONField(default=list, help_text='Keywords for AI categorization', verbose_name='keywords for AI')),
                ('confidence_threshold', models.FloatField(default=0.7, verbose_name='confidence threshold')),
                ('is_system', models.BooleanField(default=False, verbose_name='is system category')),
                ('is_active', models.BooleanField(default=True, verbose_name='is active')),
                ('order', models.IntegerField(default=0, verbose_name='order')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subcategories', to='banking.transactioncategory')),
            ],
            options={
                'verbose_name': 'Transaction Category',
                'verbose_name_plural': 'Transaction Categories',
                'db_table': 'transaction_categories',
                'ordering': ['category_type', 'order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='RecurringTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='name')),
                ('description_pattern', models.CharField(max_length=500, verbose_name='description pattern')),
                ('expected_amount', models.DecimalField(decimal_places=2, max_digits=15, verbose_name='expected amount')),
                ('amount_tolerance', models.DecimalField(decimal_places=2, default=Decimal('5.00'), help_text='Tolerance percentage for amount matching', max_digits=5, verbose_name='amount tolerance')),
                ('frequency', models.CharField(choices=[('daily', 'Di√°rio'), ('weekly', 'Semanal'), ('biweekly', 'Quinzenal'), ('monthly', 'Mensal'), ('bimonthly', 'Bimestral'), ('quarterly', 'Trimestral'), ('semiannual', 'Semestral'), ('annual', 'Anual')], max_length=20, verbose_name='frequency')),
                ('next_expected_date', models.DateField(verbose_name='next expected date')),
                ('day_tolerance', models.IntegerField(default=3, verbose_name='day tolerance')),
                ('is_active', models.BooleanField(default=True, verbose_name='is active')),
                ('auto_categorize', models.BooleanField(default=True, verbose_name='auto categorize')),
                ('send_alerts', models.BooleanField(default=True, verbose_name='send alerts')),
                ('total_occurrences', models.IntegerField(default=0, verbose_name='total occurrences')),
                ('last_occurrence_date', models.DateField(blank=True, null=True, verbose_name='last occurrence date')),
                ('accuracy_rate', models.FloatField(default=0.0, verbose_name='accuracy rate')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('bank_account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recurring_transactions', to='banking.bankaccount')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='banking.transactioncategory')),
            ],
            options={
                'verbose_name': 'Recurring Transaction',
                'verbose_name_plural': 'Recurring Transactions',
                'db_table': 'recurring_transactions',
            },
        ),
        migrations.CreateModel(
            name='BankSync',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('started_at', models.DateTimeField(auto_now_add=True, verbose_name='started at')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='completed at')),
                ('status', models.CharField(choices=[('pending', 'Pendente'), ('running', 'Executando'), ('completed', 'Conclu√≠do'), ('failed', 'Falhou'), ('partial', 'Parcial')], default='pending', max_length=20, verbose_name='status')),
                ('transactions_found', models.IntegerField(default=0, verbose_name='transactions found')),
                ('transactions_new', models.IntegerField(default=0, verbose_name='new transactions')),
                ('transactions_updated', models.IntegerField(default=0, verbose_name='updated transactions')),
                ('error_message', models.TextField(blank=True, verbose_name='error message')),
                ('error_code', models.CharField(blank=True, max_length=50, verbose_name='error code')),
                ('sync_from_date', models.DateField(verbose_name='sync from date')),
                ('sync_to_date', models.DateField(verbose_name='sync to date')),
                ('bank_account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sync_logs', to='banking.bankaccount')),
            ],
            options={
                'verbose_name': 'Bank Sync',
                'verbose_name_plural': 'Bank Syncs',
                'db_table': 'bank_syncs',
                'ordering': ['-started_at'],
            },
        ),
        migrations.AddField(
            model_name='bankaccount',
            name='bank_provider',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='banking.bankprovider'),
        ),
        migrations.AddField(
            model_name='bankaccount',
            name='company',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bank_accounts', to='companies.company'),
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('external_id', models.CharField(blank=True, max_length=100, verbose_name='external transaction ID')),
                ('transaction_type', models.CharField(choices=[('debit', 'D√©bito'), ('credit', 'Cr√©dito'), ('transfer_in', 'Transfer√™ncia Recebida'), ('transfer_out', 'Transfer√™ncia Enviada'), ('pix_in', 'PIX Recebido'), ('pix_out', 'PIX Enviado'), ('fee', 'Taxa'), ('interest', 'Juros'), ('adjustment', 'Ajuste')], max_length=20, verbose_name='transaction type')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=15, verbose_name='amount')),
                ('description', models.CharField(max_length=500, verbose_name='description')),
                ('transaction_date', models.DateTimeField(verbose_name='transaction date')),
                ('counterpart_name', models.CharField(blank=True, max_length=200, verbose_name='counterpart name')),
                ('counterpart_document', models.CharField(blank=True, max_length=20, verbose_name='counterpart document')),
                ('counterpart_bank', models.CharField(blank=True, max_length=100, verbose_name='counterpart bank')),
                ('counterpart_agency', models.CharField(blank=True, max_length=10, verbose_name='counterpart agency')),
                ('counterpart_account', models.CharField(blank=True, max_length=20, verbose_name='counterpart account')),
                ('ai_category_confidence', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)], verbose_name='AI confidence')),
                ('is_ai_categorized', models.BooleanField(default=False, verbose_name='categorized by AI')),
                ('is_manually_reviewed', models.BooleanField(default=False, verbose_name='manually reviewed')),
                ('reference_number', models.CharField(blank=True, max_length=100, verbose_name='reference number')),
                ('pix_key', models.CharField(blank=True, max_length=100, verbose_name='PIX key')),
                ('notes', models.TextField(blank=True, verbose_name='notes')),
                ('tags', models.JSONField(default=list, verbose_name='tags')),
                ('status', models.CharField(choices=[('pending', 'Pendente'), ('completed', 'Conclu√≠da'), ('failed', 'Falhou'), ('cancelled', 'Cancelada')], default='completed', max_length=20, verbose_name='status')),
                ('balance_after', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True, verbose_name='balance after transaction')),
                ('is_reconciled', models.BooleanField(default=False, verbose_name='is reconciled')),
                ('reconciled_at', models.DateTimeField(blank=True, null=True, verbose_name='reconciled at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('ai_suggested_category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ai_suggested_transactions', to='banking.transactioncategory')),
                ('bank_account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transactions', to='banking.bankaccount')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='transactions', to='banking.transactioncategory')),
                ('reconciled_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reconciled_transactions', to=settings.AUTH_USER_MODEL)),
                ('subcategory', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='subcategory_transactions', to='banking.transactioncategory')),
            ],
            options={
                'verbose_name': 'Transaction',
                'verbose_name_plural': 'Transactions',
                'db_table': 'transactions',
                'ordering': ['-transaction_date', '-created_at'],
                'indexes': [models.Index(fields=['bank_account', 'transaction_date'], name='transaction_bank_ac_7b215f_idx'), models.Index(fields=['category', 'transaction_date'], name='transaction_categor_5b779c_idx'), models.Index(fields=['transaction_type', 'transaction_date'], name='transaction_transac_348887_idx'), models.Index(fields=['external_id'], name='transaction_externa_b026b5_idx')],
            },
        ),
        migrations.AlterUniqueTogether(
            name='bankaccount',
            unique_together={('company', 'bank_provider', 'agency', 'account_number')},
        ),
    ]
